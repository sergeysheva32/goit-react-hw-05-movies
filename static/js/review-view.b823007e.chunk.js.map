{"version":3,"file":"static/js/review-view.b823007e.chunk.js","mappings":"6OAA8B,SAAAA,IAS7B,OAT6BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA9B,SAAAC,EAA+BC,GAAO,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,IAAAA,MAAA,SAAAO,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGN,MAFlB,mCACNN,EAAG,sCAAAO,OAAyCR,EAAO,YACnDE,EAAM,YAAAM,OAFA,mCAEkB,0BAAAH,EAAAE,KAAA,EAEPE,MAAM,GAADD,OAAIP,GAAGO,OAAGN,IAAU,KAAD,EAAjC,OAARC,EAAQE,EAAAK,KAAAL,EAAAE,KAAA,EACKJ,EAASQ,OAAO,KAAD,EAAxB,OAAJP,EAAIC,EAAAK,KAAAL,EAAAO,OAAA,SAEHR,GAAI,yBAAAC,EAAAQ,OAAA,GAAAd,EAAA,MACZe,MAAA,KAAAC,UAAA,CAED,I,QAAA,E,SAX8BC,GAAA,OAAApB,EAAAkB,MAAC,KAADC,UAAA,E,mDCGjBE,EAAOC,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,QAEhBC,EAAOH,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oGACPG,EAAAA,IAMTC,EAAQN,EAAAA,EAAAA,GAASO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,gDACnBM,EAAAA,IAIEC,EAAOT,EAAAA,EAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,6B,SCb5B,SAASS,EAAWC,GAAe,IAAZC,EAAOD,EAAPC,QACrB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,WAAS,EAAAC,UAClBH,EAAAA,EAAAA,KAACf,EAAI,CAAAkB,SACFJ,EAAQK,KAAI,SAAAC,GAA2B,IAAxBC,EAAED,EAAFC,GAAIC,EAAMF,EAANE,OAAQC,EAAIH,EAAJG,KAC1B,OACEC,EAAAA,EAAAA,MAACpB,EAAI,CAAAc,SAAA,EACHH,EAAAA,EAAAA,KAACR,EAAK,CAAAW,SAAEI,KACRP,EAAAA,EAAAA,KAACL,EAAI,CAAAQ,SAAEK,MAFEF,EAKf,OAIR,CAEAT,EAAYa,UAAY,CACtBX,QAASY,IAAAA,QACPA,IAAAA,MAAgB,CACdL,GAAIK,IAAAA,OACJJ,OAAQI,IAAAA,OACRH,KAAMG,IAAAA,UAERC,YAGJ,QCMA,MA/BA,WACE,IAAQ5C,GAAY6C,EAAAA,EAAAA,MAAZ7C,QACR8C,GAA8BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCf,EAAOiB,EAAA,GAAEE,EAAUF,EAAA,GAoB1B,OAlBAG,EAAAA,EAAAA,YAAU,WACRC,EAAgBpD,GAASqD,MAAK,SAAAvB,GAAkB,IAAfwB,EAAOxB,EAAPwB,QACzBC,EAAa,GAEnBD,EAAQlB,KAAI,SAAAC,GAA8B,IAClCmB,EAAS,CACblB,GAFaD,EAAFC,GAGXC,OAHqBF,EAANE,OAIfC,KAJ8BH,EAAPoB,SAOzB,OAAOF,EAAWG,KAAKF,EACzB,IAEAN,EAAWK,EACb,GACF,GAAG,CAACvD,IAEG+B,GAAWA,EAAQ4B,OAAS,GACjC3B,EAAAA,EAAAA,KAACH,EAAW,CAACE,QAASA,KAEtBC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,WAAS,EAAAC,UAClBH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,+CAGV,C","sources":["API/get-movie-reviews.js","components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","pages/Reviews.js"],"sourcesContent":["async function getMovieReviews(movieId) {\n  const key = 'd783920aea034ba2adae6031a0bf96c0';\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n  const filter = `?api_key=${key}&language=en-US&page=1`;\n\n  const response = await fetch(`${url}${filter}`);\n  const data = await response.json();\n\n  return data;\n}\n\nexport default getMovieReviews;\n","import styled from '@emotion/styled';\nimport { accentBgColor, accentTextColor } from 'utilities/variables/css';\n\nexport const List = styled.ul``;\n\nexport const Item = styled.li`\n  border: 1px solid ${accentBgColor};\n  border-radius: 5px;\n  padding: 15px;\n  margin-bottom: 15px;\n`;\n\nexport const Title = styled.h2`\n  color: ${accentTextColor};\n  margin-bottom: 15px;\n`;\n\nexport const Text = styled.p`\n  line-height: 2;\n`;\n","import propTypes from 'prop-types';\nimport Container from 'components/Container';\nimport { List, Item, Title, Text } from './ReviewsList.styled';\n\nfunction ReviewsList({ reviews }) {\n  return (\n    <Container isPadding>\n      <List>\n        {reviews.map(({ id, author, text }) => {\n          return (\n            <Item key={id}>\n              <Title>{author}</Title>\n              <Text>{text}</Text>\n            </Item>\n          );\n        })}\n      </List>\n    </Container>\n  );\n}\n\nReviewsList.prototype = {\n  reviews: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      author: propTypes.string,\n      text: propTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default ReviewsList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport getMovieReviews from 'API/get-movie-reviews';\nimport ReviewsList from 'components/ReviewsList';\nimport Container from 'components/Container';\n\nfunction Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    getMovieReviews(movieId).then(({ results }) => {\n      const reviewsArr = [];\n\n      results.map(({ id, author, content }) => {\n        const review = {\n          id,\n          author,\n          text: content,\n        };\n\n        return reviewsArr.push(review);\n      });\n\n      setReviews(reviewsArr);\n    });\n  }, [movieId]);\n\n  return reviews && reviews.length > 0 ? (\n    <ReviewsList reviews={reviews} />\n  ) : (\n    <Container isPadding>\n      <h2>We don't have any reviews for this movie.</h2>\n    </Container>\n  );\n}\n\nexport default Reviews;\n"],"names":["_getMovieReviews","_asyncToGenerator","_regeneratorRuntime","_callee","movieId","url","filter","response","data","_context","prev","next","concat","fetch","sent","json","abrupt","stop","apply","arguments","_x","List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","accentBgColor","Title","_templateObject3","accentTextColor","Text","_templateObject4","ReviewsList","_ref","reviews","_jsx","Container","isPadding","children","map","_ref2","id","author","text","_jsxs","prototype","propTypes","isRequired","useParams","_useState","useState","_useState2","_slicedToArray","setReviews","useEffect","getMovieReviews","then","results","reviewsArr","review","content","push","length"],"sourceRoot":""}